#include<iostream>
#include<bits/stdc++.h>

using namespace std;

class node
{
  public:
  int val,ht;
  node *left,*right;
  
  node(int data)
  {
      val=data;
      left=right=NULL;
      ht=0;
  }
};
node *rightRotate(node *x)
{
    node *w=x->left;
    x->left=w->right;
    w->right=x;
    x->ht=max(x->left->ht,x->right->ht)+1;
    w->ht=max(w->left->ht,w->right->ht)+1;
    return w;
}
node *leftRotate(node *w)
{
    node *x=w->right;
    w->right=x->left;
    x->left=w;
    w->ht=max(w->left->ht,w->right->ht)+1;
    x->ht=max(x->left->ht,x->right->ht)+1;
    return x;
}
node *leftRightRotate(node *z)
{
    z->left=leftRotate(z->left);
    return rightRotate(z);
}
node *RightLeftRotate(node *z)
{
    z->right=rightRotate(z->right);
    return leftRotate(z);
}


node * insert(node * root,int val)
{
    node *new_node=new node(val);

	if(!root)
        return new_node;
    if(root->val>val)
    {
        root->left=insert(root->left,val);
        
    }
    else if(root->val<val)
    {
        root->right=insert(root->right,val);  
    }
    else
        return root;
    root->ht=max(root->left->ht,root->right->ht)+1;
    int balance=root->left->ht-root->right->ht;
    
    if(balance>1 && val<root->left->val)
            return rightRotate(root);
    if(balance<-1 && val>root->right->val)
            return leftRotate(root);
    if(balance>1 && val>root->left->val)
        return leftRightRotate(root);
    if(balance<-1 && val<root->right->val)
        return RightLeftRotate(root);
    return root;
}

void Inorder(node *root)
{
    if(root)
    {
        Inorder(root->left);
        cout<<root->val<<" ";
        Inorder(root->right);
    }
    
}


int main()
{
   node *root= new node(4);
   root->left=new node(2);
   root->right=new node(8);
   root->right->left=new node(5);
   root->right->right=new node(9);
   root->right->left->right=new node(7);
   
   cout<<"Inorder Traversal"<<endl;
    Inorder(root);
    
    cout<<endl<<"Insertion in AVL tree"<<endl;
    root=insert(root,6);
    cout<<"Inorder Traversal"<<endl;
    Inorder(root);
    
    
   return 0;
}

